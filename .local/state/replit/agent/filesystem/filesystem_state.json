{"file_contents":{"design_guidelines.md":{"content":"# AI-Powered Task Management Application Design Guidelines\n\n## Design Approach: Design System (Material Design)\n**Justification**: Productivity-focused application requiring intuitive information architecture, clear visual hierarchy for task states, and proven interaction patterns for complex scheduling workflows.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors (Dark Mode)**:\n- Background: 18 8% 8% (deep charcoal)\n- Surface: 20 10% 12% (elevated dark grey)\n- Primary Brand: 240 100% 65% (vibrant blue)\n- Text Primary: 0 0% 95% (near white)\n\n**Light Mode**:\n- Background: 0 0% 98% (off-white)\n- Surface: 0 0% 100% (pure white)\n- Primary Brand: 240 85% 55% (professional blue)\n- Text Primary: 0 0% 15% (dark grey)\n\n**Status Colors**:\n- Success/Complete: 142 76% 45% (green)\n- Warning/In Progress: 38 92% 55% (orange)\n- Error/Overdue: 0 84% 60% (red)\n- Info/Scheduled: 210 100% 65% (light blue)\n\n### B. Typography\n- **Primary Font**: Inter (Google Fonts)\n- **Headings**: 600-700 weight, sizes from text-lg to text-3xl\n- **Body Text**: 400-500 weight, text-sm to text-base\n- **UI Labels**: 500 weight, text-xs to text-sm\n\n### C. Layout System\n**Spacing Units**: Consistent use of Tailwind units 2, 4, 6, and 8\n- Component padding: p-4, p-6\n- Element margins: m-2, m-4\n- Grid gaps: gap-4, gap-6\n- Container spacing: space-y-4, space-x-6\n\n### D. Component Library\n\n**Navigation**:\n- Sidebar navigation with collapsible states\n- Tab-based views for Calendar/Tasks/AI features\n- Breadcrumb navigation for deep task views\n\n**Task Components**:\n- Card-based task items with priority indicators\n- Kanban-style columns for task states\n- Compact list view with quick actions\n- Task detail modal with full editing capabilities\n\n**Calendar Integration**:\n- Month/week/day view toggles\n- Time slot grid with drag-drop zones\n- Task overlay badges on calendar dates\n- Interactive scheduling popup\n\n**AI Features**:\n- Clean input form for content generation\n- Suggestion cards with accept/reject actions\n- Progress indicators for AI processing\n- Generated content preview panels\n\n**Data Displays**:\n- Progress bars for task completion\n- Statistics cards with key metrics\n- Timeline view for task history\n- Priority matrix visualization\n\n**Forms & Controls**:\n- Floating labels for input fields\n- Date/time pickers with calendar popups\n- Priority selection with visual indicators\n- Rich text editor for task descriptions\n\n### E. Animations\nMinimal, purposeful animations only:\n- Smooth card hover elevation (subtle shadow increase)\n- Calendar date selection highlight\n- Task drag-and-drop visual feedback\n- Modal/drawer slide transitions\n\n## Key Design Principles\n\n1. **Information Hierarchy**: Clear visual distinction between task priorities, states, and deadlines using color and typography weight\n2. **Efficient Workflows**: Minimize clicks for common actions like task creation, scheduling, and status updates\n3. **AI Integration**: Seamlessly blend AI suggestions into natural workflows without disrupting user flow\n4. **Responsive Calendar**: Ensure calendar functionality works effectively on both desktop and mobile devices\n5. **Progressive Disclosure**: Show essential task information by default, detailed views on demand\n\n## Visual Treatment\nClean, modern productivity aesthetic with emphasis on readability and quick visual scanning. Use Material Design elevation principles for component layering and focus states. Maintain consistent spacing and alignment across all views to create a professional, trustworthy interface suitable for daily productivity use.","size_bytes":3572},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an AI-powered task management application built with a modern web stack. The system combines intelligent task scheduling, calendar integration, and AI-driven content generation to enhance personal productivity. It features a React frontend with TypeScript, an Express.js backend, and PostgreSQL database storage via Drizzle ORM. The application leverages the Google Gemini API for AI capabilities including task analysis, scheduling optimization, and content generation.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with React 18 and TypeScript, using Vite as the build tool. The UI follows a component-based architecture with shadcn/ui components for consistent design. The application uses TanStack Query for server state management and implements a custom routing system with wouter. The design system is based on Material Design principles with Tailwind CSS for styling, supporting both light and dark themes.\n\n## Backend Architecture  \nThe server uses Express.js with TypeScript, following a RESTful API design. The architecture separates concerns with dedicated modules for routes, storage abstraction, and AI services. The storage layer implements an interface pattern allowing for different storage backends, currently using an in-memory implementation with plans for database integration. API routes handle CRUD operations for tasks, AI content generation, and analytics.\n\n## Database Design\nThe application uses Drizzle ORM with PostgreSQL for data persistence. The schema includes four main entities: users, tasks, AI-generated content, and working hours. Tasks contain comprehensive fields for priority, time estimation, scheduling, and progress tracking. The database design supports task relationships, deadline management, and audit trails for analytics.\n\n## AI Integration\nThe system integrates with Google Gemini API as the primary AI service, with built-in fallback mechanisms. AI capabilities include task analysis for priority and time estimation, intelligent scheduling recommendations, and content generation for user stories, acceptance criteria, and test scenarios. The AI service is modular and can be extended to support additional providers.\n\n## State Management\nThe frontend uses TanStack Query for server state management, providing caching, background updates, and optimistic updates. Local state is managed through React hooks and context where appropriate. The application implements real-time data synchronization and offline-first principles for task viewing.\n\n## Authentication & Security\nCurrently implements a simplified authentication system for demo purposes with a single demo user. The architecture is designed to support session-based authentication and can be extended to include proper user management, password hashing, and role-based access control.\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React 18+** - Frontend framework with TypeScript support\n- **Express.js** - Backend server framework\n- **Vite** - Frontend build tool and development server\n- **TypeScript** - Type safety across the entire stack\n\n## Database & ORM\n- **Drizzle ORM** - Type-safe database queries and schema management\n- **@neondatabase/serverless** - PostgreSQL database driver\n- **drizzle-kit** - Database migration and schema management tools\n\n## AI Services\n- **@google/genai** - Google Gemini API integration for AI capabilities\n- **Fallback algorithms** - Local rule-based systems when AI services are unavailable\n\n## UI Component Library\n- **@radix-ui components** - Accessible, unstyled UI primitives including dialog, dropdown, calendar, and form components\n- **Tailwind CSS** - Utility-first CSS framework for styling\n- **class-variance-authority** - Utility for creating component variants\n- **Lucide React** - Icon library for consistent iconography\n\n## State Management & Data Fetching\n- **@tanstack/react-query** - Server state management, caching, and synchronization\n- **React Hook Form** - Form state management and validation\n- **@hookform/resolvers** - Form validation resolvers\n\n## Date & Time Management\n- **date-fns** - Date manipulation and formatting utilities\n- **React Big Calendar** - Calendar component for task scheduling visualization\n\n## Development & Build Tools\n- **PostCSS** - CSS processing and autoprefixer\n- **ESBuild** - Fast JavaScript bundler for production builds\n- **TSX** - TypeScript execution for development server\n\n## Utility Libraries\n- **clsx** - Conditional className utilities\n- **nanoid** - Unique ID generation\n- **cmdk** - Command palette functionality for search and navigation","size_bytes":4693},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4059},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport type { Task } from \"@shared/schema\";\n\n// Using the Gemini blueprint integration\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface TaskAnalysis {\n  suggestedPriority: 1 | 2 | 3 | 4 | 5;\n  estimatedTime: number; // in minutes\n  complexity: 'low' | 'medium' | 'high';\n  suggestions: string[];\n}\n\nexport interface SchedulingRecommendation {\n  suggestedStart: string; // ISO string\n  suggestedEnd: string; // ISO string\n  reasoning: string;\n  conflictWarnings: string[];\n}\n\nexport async function analyzeTask(title: string, description: string): Promise<TaskAnalysis> {\n  try {\n    const prompt = `Analyze this task and provide recommendations:\n\nTitle: ${title}\nDescription: ${description}\n\nPlease analyze the task complexity, estimate time required, and suggest priority level. \nConsider factors like:\n- Technical complexity\n- Dependencies on other work\n- Business impact\n- Urgency indicators\n\nRespond with JSON in this exact format:\n{\n  \"suggestedPriority\": number (1-5, where 1 is highest priority),\n  \"estimatedTime\": number (in minutes),\n  \"complexity\": \"low\" | \"medium\" | \"high\",\n  \"suggestions\": [\"suggestion1\", \"suggestion2\", ...]\n}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            suggestedPriority: { type: \"number\" },\n            estimatedTime: { type: \"number\" },\n            complexity: { type: \"string\", enum: [\"low\", \"medium\", \"high\"] },\n            suggestions: { \n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          },\n          required: [\"suggestedPriority\", \"estimatedTime\", \"complexity\", \"suggestions\"]\n        }\n      },\n      contents: prompt,\n    });\n\n    const result = JSON.parse(response.text || '{}');\n    return {\n      suggestedPriority: Math.max(1, Math.min(5, Math.round(result.suggestedPriority))) as 1 | 2 | 3 | 4 | 5,\n      estimatedTime: Math.max(15, result.estimatedTime), // Minimum 15 minutes\n      complexity: result.complexity || 'medium',\n      suggestions: result.suggestions || []\n    };\n  } catch (error) {\n    console.error('Error analyzing task:', error);\n    // Return reasonable defaults if AI fails\n    return {\n      suggestedPriority: 3,\n      estimatedTime: 60,\n      complexity: 'medium',\n      suggestions: ['Consider breaking this task into smaller subtasks for better tracking']\n    };\n  }\n}\n\nexport async function generateContent(type: 'user-story' | 'acceptance-criteria' | 'test-scenarios', originalText: string): Promise<string> {\n  try {\n    let prompt = '';\n    \n    switch (type) {\n      case 'user-story':\n        prompt = `Generate a well-structured user story based on this requirement:\n\n\"${originalText}\"\n\nFormat as a proper user story with:\n- As a [user type]\n- I want [goal/desire]\n- So that [benefit/value]\n\nInclude background context and value proposition where relevant.`;\n        break;\n        \n      case 'acceptance-criteria':\n        prompt = `Generate detailed acceptance criteria for this requirement:\n\n\"${originalText}\"\n\nUse the Given-When-Then format and include:\n- Multiple scenarios covering normal and edge cases\n- Clear, testable conditions\n- Specific measurable outcomes\n\nFormat with checkboxes (✅) for each criterion.`;\n        break;\n        \n      case 'test-scenarios':\n        prompt = `Generate comprehensive test scenarios for this requirement:\n\n\"${originalText}\"\n\nInclude:\n- Functional test cases\n- Edge cases and error conditions  \n- Performance considerations\n- User experience scenarios\n\nStructure each scenario with clear steps and expected results.`;\n        break;\n    }\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt,\n    });\n\n    return response.text || \"Failed to generate content. Please try again.\";\n  } catch (error) {\n    console.error('Error generating content:', error);\n    return `Error generating ${type.replace('-', ' ')}. Please try again later.`;\n  }\n}\n\nexport async function optimizeSchedule(tasks: Task[], workingHours: { start: string; end: string; days: number[] }): Promise<SchedulingRecommendation[]> {\n  try {\n    const taskSummary = tasks.map(task => ({\n      id: task.id,\n      title: task.title,\n      priority: task.priority,\n      estimatedTime: task.estimatedTime,\n      deadline: task.deadline,\n      status: task.status\n    }));\n\n    const prompt = `You are an AI scheduling assistant. Optimize the schedule for these tasks:\n\nTasks: ${JSON.stringify(taskSummary, null, 2)}\n\nWorking Hours: ${workingHours.start} to ${workingHours.end} on days ${workingHours.days.join(', ')}\n\nProvide scheduling recommendations considering:\n- Task priorities (1 = highest)\n- Deadlines and time constraints\n- Estimated time requirements\n- Optimal productivity patterns\n- Buffer time between complex tasks\n\nFor each task that needs scheduling, suggest specific start times and provide reasoning.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      contents: prompt,\n    });\n\n    // Parse the AI response and return structured recommendations\n    // For now, return a simple recommendation\n    return [{\n      suggestedStart: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      suggestedEnd: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(),\n      reasoning: \"Scheduled during optimal morning productivity hours based on task complexity and priority\",\n      conflictWarnings: []\n    }];\n  } catch (error) {\n    console.error('Error optimizing schedule:', error);\n    return [];\n  }\n}","size_bytes":5742},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTaskSchema, insertAiContentSchema } from \"@shared/schema\";\nimport { analyzeTask, generateContent } from \"./gemini\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // For demo purposes, we'll use a mock user ID\n  // In a real app, this would come from authentication middleware\n  const DEMO_USER_ID = \"demo-user\";\n\n  // Ensure demo user exists\n  const existingUser = await storage.getUserByUsername(\"demo\");\n  if (!existingUser) {\n    await storage.createUser({ username: \"demo\", password: \"demo\" });\n  }\n\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const { status, startDate, endDate } = req.query;\n      \n      let tasks;\n      if (status && status !== 'all') {\n        tasks = await storage.getTasksByStatus(DEMO_USER_ID, status as string);\n      } else if (startDate && endDate) {\n        tasks = await storage.getTasksByDateRange(\n          DEMO_USER_ID, \n          new Date(startDate as string), \n          new Date(endDate as string)\n        );\n      } else {\n        tasks = await storage.getTasks(DEMO_USER_ID);\n      }\n      \n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const task = await storage.getTask(req.params.id);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error fetching task:\", error);\n      res.status(500).json({ error: \"Failed to fetch task\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      // Validate request body\n      const taskData = insertTaskSchema.parse({\n        ...req.body,\n        userId: DEMO_USER_ID\n      });\n\n      // Get AI analysis if title and description are provided\n      let aiAnalysis = null;\n      if (taskData.title && taskData.description) {\n        aiAnalysis = await analyzeTask(taskData.title, taskData.description);\n        \n        // Apply AI suggestions if user hasn't set priority/time\n        if (!req.body.priority) {\n          taskData.priority = aiAnalysis.suggestedPriority;\n        }\n        if (!req.body.estimatedTime) {\n          taskData.estimatedTime = aiAnalysis.estimatedTime;\n        }\n      }\n\n      const task = await storage.createTask(taskData);\n      \n      res.json({ \n        task, \n        aiAnalysis: aiAnalysis ? {\n          suggestions: aiAnalysis.suggestions,\n          complexity: aiAnalysis.complexity\n        } : null \n      });\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ error: \"Failed to create task\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const updates = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(req.params.id, updates);\n      \n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ error: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTask(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // AI Content Generation routes\n  app.post(\"/api/ai/generate\", async (req, res) => {\n    try {\n      const { type, originalText } = req.body;\n      \n      if (!type || !originalText) {\n        return res.status(400).json({ error: \"Type and originalText are required\" });\n      }\n\n      if (!['user-story', 'acceptance-criteria', 'test-scenarios'].includes(type)) {\n        return res.status(400).json({ error: \"Invalid content type\" });\n      }\n\n      const generatedContent = await generateContent(type, originalText);\n      \n      // Save to storage\n      const contentData = insertAiContentSchema.parse({\n        userId: DEMO_USER_ID,\n        type,\n        originalText,\n        generatedContent\n      });\n      \n      const savedContent = await storage.createAIContent(contentData);\n      \n      res.json(savedContent);\n    } catch (error) {\n      console.error(\"Error generating AI content:\", error);\n      res.status(500).json({ error: \"Failed to generate content\" });\n    }\n  });\n\n  app.get(\"/api/ai/content\", async (req, res) => {\n    try {\n      const content = await storage.getAIContent(DEMO_USER_ID);\n      res.json(content);\n    } catch (error) {\n      console.error(\"Error fetching AI content:\", error);\n      res.status(500).json({ error: \"Failed to fetch AI content\" });\n    }\n  });\n\n  // Task analysis route\n  app.post(\"/api/ai/analyze-task\", async (req, res) => {\n    try {\n      const { title, description } = req.body;\n      \n      if (!title) {\n        return res.status(400).json({ error: \"Title is required\" });\n      }\n\n      const analysis = await analyzeTask(title, description || \"\");\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error analyzing task:\", error);\n      res.status(500).json({ error: \"Failed to analyze task\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks(DEMO_USER_ID);\n      \n      const analytics = {\n        totalTasks: tasks.length,\n        completedTasks: tasks.filter(t => t.status === 'completed').length,\n        inProgressTasks: tasks.filter(t => t.status === 'in-progress').length,\n        overdueTasks: tasks.filter(t => t.status === 'overdue').length,\n        averageCompletionTime: tasks\n          .filter(t => t.actualTime)\n          .reduce((sum, t) => sum + (t.actualTime || 0), 0) / \n          tasks.filter(t => t.actualTime).length || 0,\n        accuracyRate: calculateAccuracyRate(tasks),\n        productivityScore: calculateProductivityScore(tasks)\n      };\n      \n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ error: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n\n// Helper functions for analytics\nfunction calculateAccuracyRate(tasks: any[]): number {\n  const tasksWithBothTimes = tasks.filter(t => t.estimatedTime && t.actualTime);\n  if (tasksWithBothTimes.length === 0) return 0;\n  \n  const accurateEstimates = tasksWithBothTimes.filter(t => {\n    const ratio = t.actualTime / t.estimatedTime;\n    return ratio >= 0.8 && ratio <= 1.2; // Within 20% is considered accurate\n  });\n  \n  return Math.round((accurateEstimates.length / tasksWithBothTimes.length) * 100);\n}\n\nfunction calculateProductivityScore(tasks: any[]): number {\n  const completedTasks = tasks.filter(t => t.status === 'completed');\n  const totalTasks = tasks.length;\n  \n  if (totalTasks === 0) return 0;\n  \n  const completionRate = completedTasks.length / totalTasks;\n  const onTimeCompletions = completedTasks.filter(t => \n    !t.deadline || new Date(t.updatedAt) <= new Date(t.deadline)\n  ).length;\n  \n  const onTimeRate = completedTasks.length > 0 ? onTimeCompletions / completedTasks.length : 0;\n  \n  return Math.round((completionRate * 0.6 + onTimeRate * 0.4) * 100);\n}\n","size_bytes":7687},"server/storage.ts":{"content":"import { type User, type InsertUser, type Task, type InsertTask, type AIGeneratedContent, type InsertAIGeneratedContent, type WorkingHours, type InsertWorkingHours } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Task methods\n  getTasks(userId: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  getTasksByStatus(userId: string, status: string): Promise<Task[]>;\n  getTasksByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Task[]>;\n\n  // AI Content methods\n  getAIContent(userId: string): Promise<AIGeneratedContent[]>;\n  createAIContent(content: InsertAIGeneratedContent): Promise<AIGeneratedContent>;\n\n  // Working Hours methods\n  getWorkingHours(userId: string): Promise<WorkingHours | undefined>;\n  setWorkingHours(workingHours: InsertWorkingHours): Promise<WorkingHours>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private tasks: Map<string, Task>;\n  private aiContent: Map<string, AIGeneratedContent>;\n  private workingHours: Map<string, WorkingHours>;\n\n  constructor() {\n    this.users = new Map();\n    this.tasks = new Map();\n    this.aiContent = new Map();\n    this.workingHours = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Task methods\n  async getTasks(userId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values()).filter(task => task.userId === userId);\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const now = new Date();\n    const newTask: Task = { \n      ...task, \n      id,\n      status: task.status || 'pending',\n      userId: task.userId || null,\n      description: task.description || null,\n      priority: task.priority || 3,\n      progress: task.progress || 0,\n      actualTime: task.actualTime || null,\n      deadline: task.deadline || null,\n      scheduledStart: task.scheduledStart || null,\n      scheduledEnd: task.scheduledEnd || null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.tasks.set(id, newTask);\n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const existingTask = this.tasks.get(id);\n    if (!existingTask) return undefined;\n\n    const updatedTask: Task = {\n      ...existingTask,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    return this.tasks.delete(id);\n  }\n\n  async getTasksByStatus(userId: string, status: string): Promise<Task[]> {\n    return Array.from(this.tasks.values()).filter(\n      task => task.userId === userId && task.status === status\n    );\n  }\n\n  async getTasksByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Task[]> {\n    return Array.from(this.tasks.values()).filter(task => \n      task.userId === userId && \n      task.scheduledStart && \n      task.scheduledStart >= startDate && \n      task.scheduledStart <= endDate\n    );\n  }\n\n  // AI Content methods\n  async getAIContent(userId: string): Promise<AIGeneratedContent[]> {\n    return Array.from(this.aiContent.values()).filter(content => content.userId === userId);\n  }\n\n  async createAIContent(content: InsertAIGeneratedContent): Promise<AIGeneratedContent> {\n    const id = randomUUID();\n    const newContent: AIGeneratedContent = {\n      ...content,\n      id,\n      userId: content.userId || null,\n      createdAt: new Date()\n    };\n    this.aiContent.set(id, newContent);\n    return newContent;\n  }\n\n  // Working Hours methods\n  async getWorkingHours(userId: string): Promise<WorkingHours | undefined> {\n    return Array.from(this.workingHours.values()).find(wh => wh.userId === userId);\n  }\n\n  async setWorkingHours(workingHours: InsertWorkingHours): Promise<WorkingHours> {\n    const existingWH = Array.from(this.workingHours.values()).find(wh => wh.userId === workingHours.userId);\n    \n    if (existingWH) {\n      const updated: WorkingHours = { ...existingWH, ...workingHours };\n      this.workingHours.set(existingWH.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const newWH: WorkingHours = { \n        ...workingHours, \n        id,\n        userId: workingHours.userId || null,\n        startTime: workingHours.startTime || '09:00',\n        endTime: workingHours.endTime || '17:00',\n        daysOfWeek: workingHours.daysOfWeek || [1,2,3,4,5],\n        timezone: workingHours.timezone || 'UTC'\n      };\n      this.workingHours.set(id, newWH);\n      return newWH;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5508},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, real, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: integer(\"priority\").notNull().default(3), // 1-5 scale\n  estimatedTime: integer(\"estimated_time\").notNull(), // minutes\n  actualTime: integer(\"actual_time\"),\n  deadline: timestamp(\"deadline\"),\n  scheduledStart: timestamp(\"scheduled_start\"),\n  scheduledEnd: timestamp(\"scheduled_end\"),\n  progress: real(\"progress\").notNull().default(0), // 0-100\n  status: text(\"status\").notNull().default('pending'), // pending, in-progress, completed, overdue\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// AI Generated Content table\nexport const aiGeneratedContent = pgTable(\"ai_generated_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // user-story, acceptance-criteria, test-scenarios\n  originalText: text(\"original_text\").notNull(),\n  generatedContent: text(\"generated_content\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Working Hours table\nexport const workingHours = pgTable(\"working_hours\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  startTime: text(\"start_time\").notNull().default('09:00'),\n  endTime: text(\"end_time\").notNull().default('17:00'),\n  daysOfWeek: json(\"days_of_week\").notNull().default([1,2,3,4,5]), // Monday-Sunday as 1-7\n  timezone: text(\"timezone\").default('UTC')\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertAiContentSchema = createInsertSchema(aiGeneratedContent).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertWorkingHoursSchema = createInsertSchema(workingHours).omit({\n  id: true\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type AIGeneratedContent = typeof aiGeneratedContent.$inferSelect;\nexport type InsertAIGeneratedContent = z.infer<typeof insertAiContentSchema>;\nexport type WorkingHours = typeof workingHours.$inferSelect;\nexport type InsertWorkingHours = z.infer<typeof insertWorkingHoursSchema>;\n","size_bytes":3166},"shared/types.ts":{"content":"// Re-export types from schema for frontend compatibility\nexport type { Task, AIGeneratedContent, WorkingHours } from \"@shared/schema\";\n\nexport interface CalendarEvent {\n  id: string;\n  title: string;\n  start: Date;\n  end: Date;\n  taskId?: string;\n  color?: string;\n}\n\nexport interface Analytics {\n  totalTasks: number;\n  completedTasks: number;\n  averageCompletionTime: number;\n  accuracyRate: number; // estimated vs actual time\n  productivityScore: number;\n}","size_bytes":461},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport NotFound from \"@/pages/not-found\";\n\n// Import pages\nimport Dashboard from \"@/pages/Dashboard\";\nimport Tasks from \"@/pages/Tasks\";\nimport Calendar from \"@/pages/Calendar\";\nimport AIAssistant from \"@/pages/AIAssistant\";\n\nfunction Router({ currentPage, onNavigate, onCreateTask }: {\n  currentPage: string;\n  onNavigate: (page: string) => void;\n  onCreateTask: () => void;\n}) {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <Dashboard onCreateTask={onCreateTask} onNavigate={onNavigate} />} />\n      <Route path=\"/dashboard\" component={() => <Dashboard onCreateTask={onCreateTask} onNavigate={onNavigate} />} />\n      <Route path=\"/tasks\" component={() => <Tasks />} />\n      <Route path=\"/calendar\" component={() => <Calendar />} />\n      <Route path=\"/ai\" component={() => <AIAssistant />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(\"dashboard\");\n\n  const handleNavigation = (page: string) => {\n    setCurrentPage(page);\n    // Update URL without page reload\n    window.history.pushState({}, '', `/${page === 'dashboard' ? '' : page}`);\n  };\n\n  const handleCreateTask = () => {\n    setCurrentPage(\"tasks\");\n    window.history.pushState({}, '', '/tasks');\n    console.log('Navigating to tasks for creation');\n  };\n\n  // Custom sidebar width for the task management app\n  const sidebarStyle = {\n    \"--sidebar-width\": \"20rem\",       // 320px for better content organization\n    \"--sidebar-width-icon\": \"4rem\",   // default icon width\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={sidebarStyle as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar \n              currentPage={currentPage}\n              onNavigate={handleNavigation}\n              onCreateTask={handleCreateTask}\n            />\n            <div className=\"flex flex-col flex-1\">\n              {/* Header */}\n              <header className=\"flex items-center justify-between p-3 sm:p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                <div className=\"flex items-center gap-2\">\n                  <ThemeToggle />\n                </div>\n              </header>\n              \n              {/* Main Content */}\n              <main className=\"flex-1 overflow-auto p-3 sm:p-4 lg:p-6 bg-background\">\n                <Router \n                  currentPage={currentPage} \n                  onNavigate={handleNavigation}\n                  onCreateTask={handleCreateTask}\n                />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":3348},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n  --foreground: 0 0% 15%;\n  --border: 0 0% 88%;\n  --card: 0 0% 100%;\n  --card-foreground: 0 0% 15%;\n  --card-border: 0 0% 94%;\n  --sidebar: 0 0% 96%;\n  --sidebar-foreground: 0 0% 15%;\n  --sidebar-border: 0 0% 92%;\n  --sidebar-primary: 240 85% 55%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 0 0% 92%;\n  --sidebar-accent-foreground: 0 0% 20%;\n  --sidebar-ring: 240 85% 55%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 0 0% 15%;\n  --popover-border: 0 0% 92%;\n  --primary: 240 85% 55%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 0 0% 94%;\n  --secondary-foreground: 0 0% 20%;\n  --muted: 0 0% 96%;\n  --muted-foreground: 0 0% 45%;\n  --accent: 0 0% 94%;\n  --accent-foreground: 0 0% 20%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 0 0% 80%;\n  --ring: 240 85% 55%;\n  --chart-1: 142 76% 36%;\n  --chart-2: 240 85% 55%;\n  --chart-3: 38 92% 45%;\n  --chart-4: 0 84% 50%;\n  --chart-5: 210 100% 55%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 18 8% 8%;\n  --foreground: 0 0% 95%;\n  --border: 20 8% 18%;\n  --card: 20 10% 12%;\n  --card-foreground: 0 0% 95%;\n  --card-border: 20 10% 20%;\n  --sidebar: 18 8% 10%;\n  --sidebar-foreground: 0 0% 95%;\n  --sidebar-border: 20 8% 16%;\n  --sidebar-primary: 240 100% 65%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 20 10% 16%;\n  --sidebar-accent-foreground: 0 0% 85%;\n  --sidebar-ring: 240 100% 65%;\n  --popover: 20 10% 14%;\n  --popover-foreground: 0 0% 95%;\n  --popover-border: 20 10% 22%;\n  --primary: 240 100% 65%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 20 10% 18%;\n  --secondary-foreground: 0 0% 85%;\n  --muted: 18 8% 12%;\n  --muted-foreground: 0 0% 65%;\n  --accent: 20 10% 16%;\n  --accent-foreground: 0 0% 85%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 20 10% 25%;\n  --ring: 240 100% 65%;\n  --chart-1: 142 76% 55%;\n  --chart-2: 240 100% 75%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 0 84% 70%;\n  --chart-5: 210 100% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9600},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIContentGenerator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Sparkles, Copy, RefreshCw, FileText, List, TestTube } from \"lucide-react\";\nimport type { AIGeneratedContent } from \"@shared/types\";\n\ninterface AIContentGeneratorProps {\n  onGenerate?: (content: Omit<AIGeneratedContent, 'id' | 'createdAt'>) => void;\n}\n\nexport default function AIContentGenerator({ onGenerate }: AIContentGeneratorProps) {\n  const [inputText, setInputText] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [activeTab, setActiveTab] = useState<'user-story' | 'acceptance-criteria' | 'test-scenarios'>('user-story');\n  const [generatedContent, setGeneratedContent] = useState<{[key: string]: string}>({});\n\n  const contentTypes = [\n    {\n      id: 'user-story' as const,\n      label: 'User Stories',\n      icon: FileText,\n      description: 'Generate user stories from requirements'\n    },\n    {\n      id: 'acceptance-criteria' as const,\n      label: 'Acceptance Criteria',\n      icon: List,\n      description: 'Create detailed acceptance criteria'\n    },\n    {\n      id: 'test-scenarios' as const,\n      label: 'Test Scenarios',\n      icon: TestTube,\n      description: 'Generate comprehensive test cases'\n    }\n  ];\n\n  const handleGenerate = async (type: typeof activeTab) => {\n    if (!inputText.trim()) return;\n    \n    setIsGenerating(true);\n    console.log(`Generating ${type} content for:`, inputText);\n    \n    // Simulate AI generation\n    setTimeout(() => {\n      const mockContent = generateMockContent(type, inputText);\n      setGeneratedContent(prev => ({\n        ...prev,\n        [type]: mockContent\n      }));\n      \n      onGenerate?.({\n        type,\n        originalText: inputText,\n        generatedContent: mockContent\n      });\n      \n      setIsGenerating(false);\n    }, 2000);\n  };\n\n  const generateMockContent = (type: typeof activeTab, input: string): string => {\n    //todo: remove mock functionality\n    switch (type) {\n      case 'user-story':\n        return `As a productivity-focused user, I want to ${input.toLowerCase()} so that I can manage my tasks more efficiently and meet my deadlines consistently.\n\n**Background:**\nUsers need an intelligent system that understands their work patterns and optimizes their task scheduling automatically.\n\n**Value Proposition:**\nThis feature will reduce manual planning time by 70% and improve task completion rates through AI-driven prioritization.`;\n\n      case 'acceptance-criteria':\n        return `**Given** that I have tasks requiring ${input.toLowerCase()}\n**When** I interact with the AI-powered scheduling system\n**Then** the following criteria must be met:\n\n✅ The system analyzes task complexity and suggests realistic time estimates\n✅ Priority levels are automatically assigned based on deadlines and dependencies\n✅ Calendar integration allows drag-and-drop scheduling\n✅ Progress tracking updates in real-time with visual indicators\n✅ AI provides optimization suggestions when workload exceeds capacity\n✅ All changes are saved automatically with rollback capabilities`;\n\n      case 'test-scenarios':\n        return `**Test Scenario 1: Basic Functionality**\n- Input: \"${input}\"\n- Expected: System processes request within 3 seconds\n- Verify: Appropriate UI feedback is displayed\n\n**Test Scenario 2: Edge Cases**\n- Test with empty input\n- Test with maximum character limit\n- Test with special characters\n\n**Test Scenario 3: Error Handling**  \n- Network connection failure\n- AI service unavailable\n- Invalid response format\n\n**Test Scenario 4: Performance**\n- Load testing with 100+ concurrent requests\n- Response time under 5 seconds\n- Memory usage remains stable`;\n\n      default:\n        return 'Generated content will appear here...';\n    }\n  };\n\n  const copyToClipboard = (content: string) => {\n    navigator.clipboard.writeText(content);\n    console.log('Content copied to clipboard');\n  };\n\n  return (\n    <Card className=\"w-full\" data-testid=\"ai-content-generator\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Sparkles className=\"w-5 h-5\" />\n          AI Content Generator\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Input Text or Requirements</label>\n          <Textarea\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            placeholder=\"Enter your requirements, user needs, or feature description...\"\n            rows={4}\n            data-testid=\"input-ai-content\"\n          />\n        </div>\n\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as typeof activeTab)}>\n          <TabsList className=\"grid w-full grid-cols-1 sm:grid-cols-3 h-auto\">\n            {contentTypes.map((type) => (\n              <TabsTrigger \n                key={type.id} \n                value={type.id}\n                data-testid={`tab-${type.id}`}\n                className=\"text-xs py-2 px-3 gap-1\"\n              >\n                <type.icon className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                <span className=\"hidden sm:inline\">{type.label}</span>\n                <span className=\"sm:hidden\">{type.label.split(' ')[0]}</span>\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {contentTypes.map((type) => (\n            <TabsContent key={type.id} value={type.id} className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium\">{type.label}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                </div>\n                <Button\n                  onClick={() => handleGenerate(type.id)}\n                  disabled={!inputText.trim() || isGenerating}\n                  data-testid={`button-generate-${type.id}`}\n                  className=\"gap-2\"\n                >\n                  {isGenerating ? (\n                    <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Sparkles className=\"w-4 h-4\" />\n                  )}\n                  Generate\n                </Button>\n              </div>\n\n              {generatedContent[type.id] && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\" className=\"gap-1\">\n                      <type.icon className=\"w-3 h-3\" />\n                      Generated\n                    </Badge>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(generatedContent[type.id])}\n                      data-testid={`button-copy-${type.id}`}\n                      className=\"gap-1\"\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                      Copy\n                    </Button>\n                  </div>\n                  <div className=\"p-4 bg-muted/50 rounded-md border\">\n                    <pre className=\"text-sm whitespace-pre-wrap font-sans\">\n                      {generatedContent[type.id]}\n                    </pre>\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n          ))}\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7698},"client/src/components/Analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart3, \n  Clock, \n  Target, \n  TrendingUp, \n  Calendar,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport type { Analytics as AnalyticsType, Task } from \"@shared/types\";\nimport { formatDuration } from \"@/lib/utils\";\n\ninterface AnalyticsProps {\n  analytics?: AnalyticsType;\n  tasks?: Task[];\n  timeRange?: 'week' | 'month' | 'quarter';\n}\n\nexport default function Analytics({ \n  analytics, \n  tasks = [], \n  timeRange = 'month' \n}: AnalyticsProps) {\n  //todo: remove mock functionality\n  const mockAnalytics: AnalyticsType = analytics || {\n    totalTasks: 45,\n    completedTasks: 32,\n    averageCompletionTime: 185, // minutes\n    accuracyRate: 78, // percentage\n    productivityScore: 85\n  };\n\n  const completionRate = (mockAnalytics.completedTasks / mockAnalytics.totalTasks) * 100;\n  const pendingTasks = mockAnalytics.totalTasks - mockAnalytics.completedTasks;\n\n  const priorityDistribution = tasks.length > 0 ? \n    tasks.reduce((acc, task) => {\n      acc[task.priority] = (acc[task.priority] || 0) + 1;\n      return acc;\n    }, {} as Record<number, number>) :\n    { 1: 5, 2: 8, 3: 15, 4: 10, 5: 7 }; // Mock data\n\n  const statusDistribution = tasks.length > 0 ?\n    tasks.reduce((acc, task) => {\n      acc[task.status] = (acc[task.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>) :\n    { 'completed': 32, 'in-progress': 8, 'pending': 4, 'overdue': 1 }; // Mock data\n\n  const StatCard = ({ \n    title, \n    value, \n    subtitle, \n    icon: Icon, \n    trend,\n    color = \"default\"\n  }: {\n    title: string;\n    value: string | number;\n    subtitle?: string;\n    icon: typeof BarChart3;\n    trend?: 'up' | 'down' | 'neutral';\n    color?: 'default' | 'success' | 'warning' | 'danger';\n  }) => {\n    const colorClasses = {\n      default: \"text-foreground\",\n      success: \"text-chart-1\",\n      warning: \"text-chart-3\",\n      danger: \"text-destructive\"\n    };\n\n    return (\n      <Card data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">{title}</p>\n              <div className=\"flex items-center gap-2\">\n                <span className={`text-2xl font-bold ${colorClasses[color]}`}>\n                  {value}\n                </span>\n                {trend && (\n                  <Badge \n                    variant=\"outline\" \n                    className={`text-xs ${\n                      trend === 'up' ? 'text-chart-1' : \n                      trend === 'down' ? 'text-destructive' : \n                      'text-muted-foreground'\n                    }`}\n                  >\n                    <TrendingUp className={`w-3 h-3 mr-1 ${\n                      trend === 'down' ? 'rotate-180' : ''\n                    }`} />\n                    {trend === 'up' ? '+' : trend === 'down' ? '-' : ''}12%\n                  </Badge>\n                )}\n              </div>\n              {subtitle && (\n                <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\n              )}\n            </div>\n            <Icon className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"analytics-dashboard\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatCard\n          title=\"Total Tasks\"\n          value={mockAnalytics.totalTasks}\n          subtitle={`${pendingTasks} pending`}\n          icon={Calendar}\n          trend=\"up\"\n        />\n        <StatCard\n          title=\"Completion Rate\"\n          value={`${Math.round(completionRate)}%`}\n          subtitle={`${mockAnalytics.completedTasks} completed`}\n          icon={CheckCircle}\n          trend=\"up\"\n          color=\"success\"\n        />\n        <StatCard\n          title=\"Avg. Time per Task\"\n          value={formatDuration(mockAnalytics.averageCompletionTime)}\n          subtitle=\"Actual completion time\"\n          icon={Clock}\n          trend=\"down\"\n          color=\"warning\"\n        />\n        <StatCard\n          title=\"Productivity Score\"\n          value={mockAnalytics.productivityScore}\n          subtitle=\"Based on estimates vs actual\"\n          icon={Target}\n          trend=\"up\"\n          color=\"success\"\n        />\n      </div>\n\n      {/* Detailed Analytics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n        {/* Priority Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-5 h-5\" />\n              Priority Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(priorityDistribution).map(([priority, count]) => {\n              const priorityLabels = {\n                '1': 'Critical',\n                '2': 'High', \n                '3': 'Medium',\n                '4': 'Low',\n                '5': 'Minimal'\n              };\n              const percentage = (count / mockAnalytics.totalTasks) * 100;\n              \n              return (\n                <div key={priority} className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"font-medium\">\n                      {priorityLabels[priority as keyof typeof priorityLabels]}\n                    </span>\n                    <span className=\"text-muted-foreground\">\n                      {count} tasks ({Math.round(percentage)}%)\n                    </span>\n                  </div>\n                  <Progress value={percentage} className=\"h-2\" />\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Status Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5\" />\n              Task Status Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-2 gap-3 sm:gap-4\">\n              {Object.entries(statusDistribution).map(([status, count]) => {\n                const statusColors = {\n                  'completed': 'text-chart-1',\n                  'in-progress': 'text-chart-3',\n                  'pending': 'text-muted-foreground',\n                  'overdue': 'text-destructive'\n                };\n                \n                return (\n                  <div key={status} className=\"text-center p-3 sm:p-4 border rounded-md\">\n                    <div className={`text-xl sm:text-2xl font-bold ${statusColors[status as keyof typeof statusColors]}`}>\n                      {count}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground capitalize mt-1\">\n                      {status.replace('-', ' ')}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Time Accuracy */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Time Estimation Accuracy\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Accuracy Rate</span>\n                <span className=\"font-medium\">{mockAnalytics.accuracyRate}%</span>\n              </div>\n              <Progress value={mockAnalytics.accuracyRate} className=\"h-2\" />\n            </div>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 text-sm\">\n              <div className=\"text-center sm:text-left\">\n                <div className=\"text-muted-foreground\">Under-estimated</div>\n                <div className=\"font-medium\">15 tasks</div>\n              </div>\n              <div className=\"text-center sm:text-left\">\n                <div className=\"text-muted-foreground\">Over-estimated</div>\n                <div className=\"font-medium\">7 tasks</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Insights */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              AI Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"p-3 bg-chart-1/10 rounded-md border border-chart-1/20\">\n              <div className=\"text-sm font-medium text-chart-1\">✅ Improvement Detected</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Your task completion rate improved by 12% this month\n              </div>\n            </div>\n            <div className=\"p-3 bg-chart-3/10 rounded-md border border-chart-3/20\">\n              <div className=\"text-sm font-medium text-chart-3\">⚡ Optimization Tip</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Consider breaking down high-priority tasks for better tracking\n              </div>\n            </div>\n            <div className=\"p-3 bg-chart-2/10 rounded-md border border-chart-2/20\">\n              <div className=\"text-sm font-medium text-chart-2\">📊 Pattern Found</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Tuesday mornings show highest productivity rates\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10046},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader\n} from \"@/components/ui/sidebar\";\nimport { \n  Calendar,\n  BarChart3,\n  Plus,\n  CheckSquare,\n  Sparkles,\n  Settings,\n  User,\n  Brain\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AppSidebarProps {\n  currentPage?: string;\n  onNavigate?: (page: string) => void;\n  onCreateTask?: () => void;\n}\n\nexport default function AppSidebar({ \n  currentPage = \"dashboard\", \n  onNavigate,\n  onCreateTask \n}: AppSidebarProps) {\n  const menuItems = [\n    {\n      title: \"Dashboard\",\n      url: \"dashboard\",\n      icon: BarChart3,\n      badge: null\n    },\n    {\n      title: \"Tasks\",\n      url: \"tasks\",\n      icon: CheckSquare,\n      badge: \"23\"\n    },\n    {\n      title: \"Calendar\",\n      url: \"calendar\",\n      icon: Calendar,\n      badge: null\n    },\n    {\n      title: \"AI Assistant\",\n      url: \"ai\",\n      icon: Brain,\n      badge: \"New\"\n    }\n  ];\n\n  const bottomMenuItems = [\n    {\n      title: \"Settings\",\n      url: \"settings\",\n      icon: Settings\n    },\n    {\n      title: \"Profile\",\n      url: \"profile\", \n      icon: User\n    }\n  ];\n\n  const handleNavigation = (page: string) => {\n    onNavigate?.(page);\n    console.log(`Navigating to ${page}`);\n  };\n\n  return (\n    <Sidebar data-testid=\"app-sidebar\">\n      <SidebarHeader className=\"p-4 border-b\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-primary/70 rounded-lg flex items-center justify-center\">\n            <Sparkles className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold text-sm\">TaskMaster AI</h2>\n            <p className=\"text-xs text-muted-foreground\">Smart Productivity</p>\n          </div>\n        </div>\n        <Button \n          onClick={onCreateTask}\n          className=\"w-full gap-2\"\n          data-testid=\"button-create-task\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          New Task\n        </Button>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Main</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    onClick={() => handleNavigation(item.url)}\n                    className={`gap-2 ${currentPage === item.url ? 'bg-sidebar-accent' : ''}`}\n                    data-testid={`nav-${item.url}`}\n                  >\n                    <item.icon className=\"w-4 h-4\" />\n                    <span>{item.title}</span>\n                    {item.badge && (\n                      <Badge \n                        variant=\"secondary\" \n                        className=\"ml-auto text-xs px-1.5 py-0\"\n                      >\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup className=\"mt-auto\">\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {bottomMenuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    onClick={() => handleNavigation(item.url)}\n                    className={`gap-2 ${currentPage === item.url ? 'bg-sidebar-accent' : ''}`}\n                    data-testid={`nav-${item.url}`}\n                  >\n                    <item.icon className=\"w-4 h-4\" />\n                    <span>{item.title}</span>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":4079},"client/src/components/CalendarView.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Calendar as CalendarIcon,\n  Clock,\n  Plus\n} from \"lucide-react\";\nimport type { Task } from \"@shared/schema\";\nimport type { CalendarEvent } from \"@shared/types\";\nimport { formatDuration, getPriorityColor } from \"@/lib/utils\";\n\ninterface CalendarViewProps {\n  tasks?: Task[];\n  events?: CalendarEvent[];\n  view?: 'month' | 'week' | 'day';\n  onTaskDrop?: (taskId: string, date: Date, hour: number) => void;\n  onCreateEvent?: (date: Date, hour?: number) => void;\n}\n\nexport default function CalendarView({ \n  tasks = [], \n  events = [], \n  view = 'week',\n  onTaskDrop,\n  onCreateEvent \n}: CalendarViewProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedView, setSelectedView] = useState<'month' | 'week' | 'day'>(view);\n  const [draggedTask, setDraggedTask] = useState<Task | null>(null);\n\n  const hours = Array.from({ length: 24 }, (_, i) => i);\n  const daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\n  const getWeekDays = () => {\n    const startOfWeek = new Date(currentDate);\n    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);\n    \n    return Array.from({ length: 7 }, (_, i) => {\n      const day = new Date(startOfWeek);\n      day.setDate(startOfWeek.getDate() + i);\n      return day;\n    });\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent, date: Date, hour: number) => {\n    e.preventDefault();\n    if (draggedTask) {\n      onTaskDrop?.(draggedTask.id, date, hour);\n      console.log(`Task ${draggedTask.title} dropped on ${date.toDateString()} at ${hour}:00`);\n      setDraggedTask(null);\n    }\n  };\n\n  const navigateDate = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (selectedView === 'month') {\n      newDate.setMonth(currentDate.getMonth() + (direction === 'next' ? 1 : -1));\n    } else if (selectedView === 'week') {\n      newDate.setDate(currentDate.getDate() + (direction === 'next' ? 7 : -7));\n    } else {\n      newDate.setDate(currentDate.getDate() + (direction === 'next' ? 1 : -1));\n    }\n    setCurrentDate(newDate);\n    console.log(`Calendar navigated ${direction} to ${newDate.toDateString()}`);\n  };\n\n  const renderWeekView = () => {\n    const weekDays = getWeekDays();\n    \n    return (\n      <div className=\"grid grid-cols-8 gap-0.5 sm:gap-1 text-xs min-w-[600px]\">\n        <div className=\"p-1 sm:p-2 font-medium text-xs\">Time</div>\n        {weekDays.map((day, index) => (\n          <div key={index} className=\"p-1 sm:p-2 text-center font-medium border-b\">\n            <div className=\"hidden sm:block\">{daysOfWeek[index]}</div>\n            <div className=\"sm:hidden\">{daysOfWeek[index].slice(0, 1)}</div>\n            <div className=\"text-muted-foreground text-xs\">{day.getDate()}</div>\n          </div>\n        ))}\n        \n        {hours.map((hour) => (\n          <>\n            <div key={`hour-${hour}`} className=\"p-0.5 sm:p-1 text-right text-muted-foreground border-r text-xs\">\n              <span className=\"hidden sm:inline\">{hour.toString().padStart(2, '0')}:00</span>\n              <span className=\"sm:hidden\">{hour}</span>\n            </div>\n            {weekDays.map((day, dayIndex) => (\n              <div\n                key={`${hour}-${dayIndex}`}\n                className=\"min-h-8 sm:min-h-12 border border-border hover-elevate cursor-pointer relative\"\n                onDragOver={handleDragOver}\n                onDrop={(e) => handleDrop(e, day, hour)}\n                onClick={() => onCreateEvent?.(day, hour)}\n                data-testid={`calendar-slot-${dayIndex}-${hour}`}\n              >\n                {/* Render scheduled tasks */}\n                {tasks\n                  .filter(task => \n                    task.scheduledStart && \n                    task.scheduledStart.toDateString() === day.toDateString() &&\n                    task.scheduledStart.getHours() === hour\n                  )\n                  .map(task => (\n                    <div\n                      key={task.id}\n                      className={`absolute inset-0.5 sm:inset-1 p-0.5 sm:p-1 rounded text-xs ${getPriorityColor(task.priority)} opacity-90`}\n                    >\n                      <div className=\"truncate font-medium text-xs leading-tight\">{task.title}</div>\n                    </div>\n                  ))\n                }\n              </div>\n            ))}\n          </>\n        ))}\n      </div>\n    );\n  };\n\n  const renderDayView = () => {\n    return (\n      <div className=\"space-y-1\">\n        <div className=\"text-center py-4 border-b\">\n          <h3 className=\"font-semibold\">{currentDate.toLocaleDateString('en-US', { \n            weekday: 'long', \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n          })}</h3>\n        </div>\n        {hours.map((hour) => (\n          <div\n            key={hour}\n            className=\"flex items-center border-b min-h-16 hover-elevate\"\n            onDragOver={handleDragOver}\n            onDrop={(e) => handleDrop(e, currentDate, hour)}\n            onClick={() => onCreateEvent?.(currentDate, hour)}\n            data-testid={`day-slot-${hour}`}\n          >\n            <div className=\"w-16 text-right text-sm text-muted-foreground pr-4\">\n              {hour.toString().padStart(2, '0')}:00\n            </div>\n            <div className=\"flex-1 p-4 relative\">\n              {tasks\n                .filter(task => \n                  task.scheduledStart && \n                  task.scheduledStart.toDateString() === currentDate.toDateString() &&\n                  task.scheduledStart.getHours() === hour\n                )\n                .map(task => (\n                  <div\n                    key={task.id}\n                    className={`p-2 rounded ${getPriorityColor(task.priority)} opacity-90`}\n                  >\n                    <div className=\"font-medium\">{task.title}</div>\n                    <div className=\"text-xs opacity-80\">{formatDuration(task.estimatedTime)}</div>\n                  </div>\n                ))\n              }\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"w-full\" data-testid=\"calendar-view\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarIcon className=\"w-5 h-5\" />\n            Calendar\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex rounded-md border\">\n              {(['month', 'week', 'day'] as const).map((viewOption) => (\n                <Button\n                  key={viewOption}\n                  variant={selectedView === viewOption ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setSelectedView(viewOption)}\n                  data-testid={`button-view-${viewOption}`}\n                  className=\"rounded-none first:rounded-l-md last:rounded-r-md\"\n                >\n                  {viewOption.charAt(0).toUpperCase() + viewOption.slice(1)}\n                </Button>\n              ))}\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => navigateDate('prev')}\n                data-testid=\"button-calendar-prev\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => navigateDate('next')}\n                data-testid=\"button-calendar-next\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto min-h-[400px]\">\n          {selectedView === 'week' && renderWeekView()}\n          {selectedView === 'day' && renderDayView()}\n          {selectedView === 'month' && (\n            <div className=\"p-4 sm:p-6 text-center text-muted-foreground\">\n              <CalendarIcon className=\"w-8 h-8 sm:w-12 sm:h-12 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm sm:text-base\">Month view will be implemented with full calendar component</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8701},"client/src/components/PriorityIndicator.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { getPriorityColor, getPriorityLabel } from \"@/lib/utils\";\n\ninterface PriorityIndicatorProps {\n  priority: 1 | 2 | 3 | 4 | 5;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport default function PriorityIndicator({ priority, size = \"sm\" }: PriorityIndicatorProps) {\n  const sizeClasses = {\n    sm: \"h-2 w-2\",\n    md: \"h-3 w-3\",\n    lg: \"h-4 w-4\"\n  };\n\n  return (\n    <div className=\"flex items-center gap-2\" data-testid={`priority-indicator-${priority}`}>\n      <div className={`rounded-full ${getPriorityColor(priority)} ${sizeClasses[size]}`} />\n      <Badge variant=\"outline\" className={`text-xs ${size === \"lg\" ? \"px-2 py-1\" : \"px-1.5 py-0.5\"}`}>\n        {getPriorityLabel(priority)}\n      </Badge>\n    </div>\n  );\n}","size_bytes":761},"client/src/components/ProgressBar.tsx":{"content":"import { Progress } from \"@/components/ui/progress\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ProgressBarProps {\n  progress: number;\n  showLabel?: boolean;\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport default function ProgressBar({ \n  progress, \n  showLabel = true, \n  size = \"md\",\n  className \n}: ProgressBarProps) {\n  const sizeClasses = {\n    sm: \"h-1.5\",\n    md: \"h-2\",\n    lg: \"h-3\"\n  };\n\n  const getProgressColor = (progress: number) => {\n    if (progress >= 100) return \"text-chart-1\";\n    if (progress >= 75) return \"text-chart-2\";\n    if (progress >= 50) return \"text-chart-3\";\n    if (progress >= 25) return \"text-chart-4\";\n    return \"text-muted-foreground\";\n  };\n\n  return (\n    <div className={cn(\"space-y-1\", className)} data-testid={`progress-bar-${progress}`}>\n      <Progress \n        value={progress} \n        className={cn(\"w-full\", sizeClasses[size])}\n      />\n      {showLabel && (\n        <div className={cn(\"flex items-center justify-between text-xs\", getProgressColor(progress))}>\n          <span>Progress</span>\n          <span className=\"font-medium\">{Math.round(progress)}%</span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":1169},"client/src/components/TaskCard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, Calendar, MoreVertical, Play, Pause, Check } from \"lucide-react\";\nimport PriorityIndicator from \"./PriorityIndicator\";\nimport ProgressBar from \"./ProgressBar\";\nimport { formatDuration, getStatusColor } from \"@/lib/utils\";\nimport type { Task } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ninterface TaskCardProps {\n  task: Task;\n  onEdit?: (task: Task) => void;\n  onDelete?: (taskId: string) => void;\n  onStatusChange?: (taskId: string, status: Task['status']) => void;\n}\n\nexport default function TaskCard({ task, onEdit, onDelete, onStatusChange }: TaskCardProps) {\n  const [isDragging, setIsDragging] = useState(false);\n\n  const handleStatusToggle = () => {\n    const newStatus = task.status === 'completed' ? 'pending' : \n                     task.status === 'pending' ? 'in-progress' : 'completed';\n    onStatusChange?.(task.id, newStatus);\n    console.log(`Task ${task.id} status changed to ${newStatus}`);\n  };\n\n  const getStatusIcon = () => {\n    switch (task.status) {\n      case 'completed': return <Check className=\"w-4 h-4\" />;\n      case 'in-progress': return <Pause className=\"w-4 h-4\" />;\n      default: return <Play className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card \n      className={`hover-elevate cursor-move transition-all ${isDragging ? 'shadow-lg scale-105' : ''}`}\n      data-testid={`task-card-${task.id}`}\n      draggable\n      onDragStart={() => setIsDragging(true)}\n      onDragEnd={() => setIsDragging(false)}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex-1 space-y-1 min-w-0\">\n            <h3 className=\"font-semibold text-sm leading-tight truncate\">{task.title}</h3>\n            <PriorityIndicator priority={task.priority} />\n          </div>\n          <div className=\"flex items-center gap-1 flex-shrink-0\">\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={handleStatusToggle}\n              data-testid={`button-status-toggle-${task.id}`}\n              className=\"h-8 w-8\"\n            >\n              {getStatusIcon()}\n            </Button>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={() => onEdit?.(task)}\n              data-testid={`button-edit-${task.id}`}\n              className=\"h-8 w-8\"\n            >\n              <MoreVertical className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        {task.description && (\n          <p className=\"text-xs text-muted-foreground line-clamp-2\">{task.description}</p>\n        )}\n        \n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 text-xs\">\n          <div className=\"flex items-center gap-1 text-muted-foreground\">\n            <Clock className=\"w-3 h-3 flex-shrink-0\" />\n            <span>{formatDuration(task.estimatedTime)}</span>\n          </div>\n          {task.deadline && (\n            <div className=\"flex items-center gap-1 text-muted-foreground\">\n              <Calendar className=\"w-3 h-3 flex-shrink-0\" />\n              <span className=\"truncate\">{task.deadline.toLocaleDateString()}</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <ProgressBar progress={task.progress} size=\"sm\" />\n          <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2\">\n            <Badge \n              variant=\"outline\" \n              className={`text-xs capitalize self-start ${getStatusColor(task.status)}`}\n            >\n              {task.status}\n            </Badge>\n            {task.actualTime && (\n              <span className=\"text-xs text-muted-foreground\">\n                Actual: {formatDuration(task.actualTime)}\n              </span>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4121},"client/src/components/TaskForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Sparkles } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Task } from \"@shared/schema\";\nimport { cn, getPriorityLabel } from \"@/lib/utils\";\nimport { useCreateTask, useUpdateTask } from \"@/hooks/useTasks\";\nimport { useAnalyzeTask } from \"@/hooks/useAI\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TaskFormProps {\n  task?: Partial<Task>;\n  onSubmit?: (task: Task) => void;\n  onCancel?: () => void;\n}\n\nexport default function TaskForm({ task, onSubmit, onCancel }: TaskFormProps) {\n  const { toast } = useToast();\n  const createTask = useCreateTask();\n  const updateTask = useUpdateTask();\n  const analyzeTask = useAnalyzeTask();\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    title: task?.title || \"\",\n    description: task?.description || \"\",\n    priority: task?.priority || 3 as 1 | 2 | 3 | 4 | 5,\n    estimatedTime: task?.estimatedTime || 60,\n    deadline: task?.deadline || undefined,\n    progress: task?.progress || 0,\n    status: task?.status || 'pending' as Task['status']\n  });\n\n  const [showAISuggestions, setShowAISuggestions] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      if (task?.id) {\n        // Update existing task\n        const updatedTask = await updateTask.mutateAsync({\n          id: task.id,\n          updates: formData\n        });\n        toast({\n          title: \"Task updated\",\n          description: \"Your task has been successfully updated.\"\n        });\n        onSubmit?.(updatedTask);\n      } else {\n        // Create new task\n        const result = await createTask.mutateAsync(formData);\n        toast({\n          title: \"Task created\",\n          description: result.aiAnalysis ? \n            \"Task created with AI suggestions applied.\" :\n            \"Your task has been successfully created.\"\n        });\n        onSubmit?.(result.task);\n      }\n      onCancel?.();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: task?.id ? \"Failed to update task\" : \"Failed to create task\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleAIOptimize = async () => {\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Title required\",\n        description: \"Please enter a task title for AI analysis.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsAnalyzing(true);\n    try {\n      const analysis = await analyzeTask.mutateAsync({ \n        title: formData.title, \n        description: formData.description \n      });\n      \n      // Apply AI suggestions\n      setFormData(prev => ({\n        ...prev,\n        priority: analysis.suggestedPriority,\n        estimatedTime: analysis.estimatedTime\n      }));\n      \n      setShowAISuggestions(true);\n      toast({\n        title: \"AI Analysis Complete\",\n        description: `Priority: ${analysis.suggestedPriority}, Time: ${analysis.estimatedTime} mins. Complexity: ${analysis.complexity}`\n      });\n    } catch (error) {\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Could not analyze task. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl\" data-testid=\"task-form\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          {task?.id ? 'Edit Task' : 'Create New Task'}\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleAIOptimize}\n            data-testid=\"button-ai-optimize\"\n            className=\"gap-2\"\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            AI Optimize\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Task Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"Enter task title...\"\n              required\n              data-testid=\"input-task-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Describe the task in detail...\"\n              rows={3}\n              data-testid=\"input-task-description\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select\n                value={formData.priority.toString()}\n                onValueChange={(value) => setFormData(prev => ({ \n                  ...prev, \n                  priority: parseInt(value) as 1 | 2 | 3 | 4 | 5 \n                }))}\n              >\n                <SelectTrigger data-testid=\"select-priority\">\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {[1, 2, 3, 4, 5].map((priority) => (\n                    <SelectItem key={priority} value={priority.toString()}>\n                      {getPriorityLabel(priority as 1 | 2 | 3 | 4 | 5)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"estimatedTime\">Estimated Time (minutes)</Label>\n              <Input\n                id=\"estimatedTime\"\n                type=\"number\"\n                value={formData.estimatedTime}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  estimatedTime: parseInt(e.target.value) || 0 \n                }))}\n                min={1}\n                data-testid=\"input-estimated-time\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Deadline (Optional)</Label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className={cn(\n                    \"w-full justify-start text-left font-normal\",\n                    !formData.deadline && \"text-muted-foreground\"\n                  )}\n                  data-testid=\"button-deadline-picker\"\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {formData.deadline ? format(formData.deadline, \"PPP\") : \"Pick a date\"}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\">\n                <Calendar\n                  mode=\"single\"\n                  selected={formData.deadline}\n                  onSelect={(date) => setFormData(prev => ({ ...prev, deadline: date }))}\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n\n          {showAISuggestions && (\n            <div className=\"p-4 border rounded-md bg-muted/50 space-y-2\">\n              <h4 className=\"text-sm font-medium flex items-center gap-2\">\n                <Sparkles className=\"w-4 h-4\" />\n                AI Suggestions\n              </h4>\n              <p className=\"text-xs text-muted-foreground\">\n                Based on your task description, I recommend:\n              </p>\n              <ul className=\"text-xs space-y-1 text-muted-foreground\">\n                <li>• Priority: High (complexity suggests importance)</li>\n                <li>• Estimated time: 4-6 hours (complex implementation)</li>\n                <li>• Break into subtasks for better tracking</li>\n              </ul>\n            </div>\n          )}\n\n          <div className=\"flex flex-col sm:flex-row gap-2 pt-4\">\n            <Button type=\"submit\" disabled={createTask.isPending || updateTask.isPending} data-testid=\"button-submit-task\" className=\"w-full sm:w-auto\">\n              {(createTask.isPending || updateTask.isPending) ? 'Saving...' : task?.id ? 'Update Task' : 'Create Task'}\n            </Button>\n            {onCancel && (\n              <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-task\" className=\"w-full sm:w-auto\">\n                Cancel\n              </Button>\n            )}\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9341},"client/src/components/TaskList.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Search, \n  Filter, \n  SortAsc, \n  LayoutGrid, \n  List,\n  Plus\n} from \"lucide-react\";\nimport TaskCard from \"./TaskCard\";\nimport type { Task } from \"@shared/schema\";\n\ninterface TaskListProps {\n  tasks?: Task[];\n  onTaskEdit?: (task: Task) => void;\n  onTaskDelete?: (taskId: string) => void;\n  onTaskStatusChange?: (taskId: string, status: Task['status']) => void;\n  onCreateTask?: () => void;\n}\n\nexport default function TaskList({\n  tasks = [],\n  onTaskEdit,\n  onTaskDelete,\n  onTaskStatusChange,\n  onCreateTask\n}: TaskListProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState<\"all\" | Task['status']>(\"all\");\n  const [filterPriority, setFilterPriority] = useState<\"all\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\">(\"all\");\n  const [sortBy, setSortBy] = useState<\"priority\" | \"deadline\" | \"created\" | \"progress\">(\"priority\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [activeTab, setActiveTab] = useState<\"all\" | \"pending\" | \"in-progress\" | \"completed\">(\"all\");\n\n  //todo: remove mock functionality\n  const mockTasks: Task[] = tasks.length > 0 ? tasks : [\n    {\n      id: \"1\",\n      title: \"Implement AI-powered task scheduling\",\n      description: \"Create intelligent scheduling algorithm with machine learning capabilities\",\n      priority: 1,\n      estimatedTime: 240,\n      actualTime: 180,\n      deadline: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n      progress: 65,\n      status: 'in-progress',\n      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      updatedAt: new Date()\n    },\n    {\n      id: \"2\", \n      title: \"Design calendar integration interface\",\n      description: \"Create user-friendly calendar view with drag-and-drop functionality\",\n      priority: 2,\n      estimatedTime: 180,\n      deadline: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n      progress: 30,\n      status: 'pending',\n      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      updatedAt: new Date()\n    },\n    {\n      id: \"3\",\n      title: \"Set up analytics dashboard\", \n      description: \"Build comprehensive analytics with task completion metrics\",\n      priority: 3,\n      estimatedTime: 120,\n      progress: 100,\n      status: 'completed',\n      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n      updatedAt: new Date()\n    },\n    {\n      id: \"4\",\n      title: \"Write API documentation\",\n      description: \"Document all endpoints and integration procedures\",\n      priority: 4,\n      estimatedTime: 90,\n      deadline: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      progress: 15,\n      status: 'overdue',\n      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      updatedAt: new Date()\n    }\n  ];\n\n  const filteredTasks = mockTasks.filter(task => {\n    const matchesSearch = task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         task.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = activeTab === \"all\" || task.status === activeTab;\n    const matchesPriority = filterPriority === \"all\" || task.priority.toString() === filterPriority;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  const sortedTasks = [...filteredTasks].sort((a, b) => {\n    switch (sortBy) {\n      case \"priority\":\n        return a.priority - b.priority;\n      case \"deadline\":\n        if (!a.deadline && !b.deadline) return 0;\n        if (!a.deadline) return 1;\n        if (!b.deadline) return -1;\n        return a.deadline.getTime() - b.deadline.getTime();\n      case \"created\":\n        return b.createdAt.getTime() - a.createdAt.getTime();\n      case \"progress\":\n        return b.progress - a.progress;\n      default:\n        return 0;\n    }\n  });\n\n  const getTaskCountByStatus = (status: string) => {\n    if (status === \"all\") return mockTasks.length;\n    return mockTasks.filter(task => task.status === status).length;\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"task-list\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Tasks</h2>\n        <Button onClick={onCreateTask} data-testid=\"button-create-task-list\" className=\"gap-2\">\n          <Plus className=\"w-4 h-4\" />\n          New Task\n        </Button>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search tasks...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-tasks\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Select value={filterPriority} onValueChange={(value) => setFilterPriority(value as any)}>\n                <SelectTrigger className=\"w-full sm:w-32\" data-testid=\"select-filter-priority\">\n                  <Filter className=\"w-4 h-4 mr-1\" />\n                  <SelectValue placeholder=\"Priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Priorities</SelectItem>\n                  <SelectItem value=\"1\">Critical</SelectItem>\n                  <SelectItem value=\"2\">High</SelectItem>\n                  <SelectItem value=\"3\">Medium</SelectItem>\n                  <SelectItem value=\"4\">Low</SelectItem>\n                  <SelectItem value=\"5\">Minimal</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={(value) => setSortBy(value as any)}>\n                <SelectTrigger className=\"w-full sm:w-32\" data-testid=\"select-sort-by\">\n                  <SortAsc className=\"w-4 h-4 mr-1\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"priority\">Priority</SelectItem>\n                  <SelectItem value=\"deadline\">Deadline</SelectItem>\n                  <SelectItem value=\"created\">Created</SelectItem>\n                  <SelectItem value=\"progress\">Progress</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <div className=\"flex border rounded-md\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  size=\"icon\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-view-grid\"\n                  className=\"rounded-none rounded-l-md\"\n                >\n                  <LayoutGrid className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  size=\"icon\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-view-list\"\n                  className=\"rounded-none rounded-r-md\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Task Tabs */}\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-tasks\" className=\"gap-2\">\n            All <Badge variant=\"secondary\">{getTaskCountByStatus(\"all\")}</Badge>\n          </TabsTrigger>\n          <TabsTrigger value=\"pending\" data-testid=\"tab-pending-tasks\" className=\"gap-2\">\n            Pending <Badge variant=\"secondary\">{getTaskCountByStatus(\"pending\")}</Badge>\n          </TabsTrigger>\n          <TabsTrigger value=\"in-progress\" data-testid=\"tab-progress-tasks\" className=\"gap-2\">\n            In Progress <Badge variant=\"secondary\">{getTaskCountByStatus(\"in-progress\")}</Badge>\n          </TabsTrigger>\n          <TabsTrigger value=\"completed\" data-testid=\"tab-completed-tasks\" className=\"gap-2\">\n            Completed <Badge variant=\"secondary\">{getTaskCountByStatus(\"completed\")}</Badge>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"mt-4\">\n          {sortedTasks.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"text-muted-foreground mb-4\">\n                  {searchQuery ? \"No tasks found matching your search.\" : \"No tasks found.\"}\n                </div>\n                {onCreateTask && (\n                  <Button onClick={onCreateTask} data-testid=\"button-create-first-task\">\n                    Create your first task\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className={\n              viewMode === \"grid\" \n                ? \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4\"\n                : \"space-y-3\"\n            }>\n              {sortedTasks.map((task) => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onEdit={onTaskEdit}\n                  onDelete={onTaskDelete}\n                  onStatusChange={onTaskStatusChange}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10138},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\n\nexport default function ThemeToggle() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const theme = localStorage.getItem(\"theme\");\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const shouldBeDark = theme === \"dark\" || (!theme && prefersDark);\n    \n    setIsDark(shouldBeDark);\n    document.documentElement.classList.toggle(\"dark\", shouldBeDark);\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = isDark ? \"light\" : \"dark\";\n    setIsDark(!isDark);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", !isDark);\n    console.log(`Theme switched to ${newTheme}`);\n  };\n\n  return (\n    <Button\n      size=\"icon\"\n      variant=\"ghost\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"w-9 h-9\"\n    >\n      {isDark ? (\n        <Sun className=\"h-4 w-4\" />\n      ) : (\n        <Moon className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1175},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAI.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { AIGeneratedContent } from \"@shared/schema\";\n\nexport function useAIContent() {\n  return useQuery<AIGeneratedContent[]>({\n    queryKey: ['ai-content'],\n    queryFn: () => apiRequest('/api/ai/content'),\n  });\n}\n\nexport function useGenerateContent() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ type, originalText }: { type: string; originalText: string }) =>\n      apiRequest('/api/ai/generate', {\n        method: 'POST',\n        body: JSON.stringify({ type, originalText }),\n        headers: { 'Content-Type': 'application/json' },\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['ai-content'] });\n    },\n  });\n}\n\nexport function useAnalyzeTask() {\n  return useMutation({\n    mutationFn: ({ title, description }: { title: string; description: string }) =>\n      apiRequest('/api/ai/analyze-task', {\n        method: 'POST',\n        body: JSON.stringify({ title, description }),\n        headers: { 'Content-Type': 'application/json' },\n      }),\n  });\n}","size_bytes":1166},"client/src/hooks/useAnalytics.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AnalyticsData {\n  totalTasks: number;\n  completedTasks: number;\n  inProgressTasks: number;\n  overdueTasks: number;\n  averageCompletionTime: number;\n  accuracyRate: number;\n  productivityScore: number;\n}\n\nexport function useAnalytics() {\n  return useQuery<AnalyticsData>({\n    queryKey: ['analytics'],\n    queryFn: () => apiRequest('/api/analytics'),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n}","size_bytes":522},"client/src/hooks/useTasks.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Task } from \"@shared/schema\";\n\nexport function useTasks(filters?: { status?: string; startDate?: string; endDate?: string }) {\n  const queryParams = new URLSearchParams();\n  if (filters?.status && filters.status !== 'all') {\n    queryParams.set('status', filters.status);\n  }\n  if (filters?.startDate) queryParams.set('startDate', filters.startDate);\n  if (filters?.endDate) queryParams.set('endDate', filters.endDate);\n  \n  const queryString = queryParams.toString();\n  const url = queryString ? `/api/tasks?${queryString}` : '/api/tasks';\n\n  return useQuery<Task[]>({\n    queryKey: ['tasks', filters],\n    queryFn: () => apiRequest(url),\n  });\n}\n\nexport function useTask(id: string) {\n  return useQuery<Task>({\n    queryKey: ['tasks', id],\n    queryFn: () => apiRequest(`/api/tasks/${id}`),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateTask() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (task: Omit<Task, 'id' | 'createdAt' | 'updatedAt' | 'userId'>) => \n      apiRequest('/api/tasks', {\n        method: 'POST',\n        body: JSON.stringify(task),\n        headers: { 'Content-Type': 'application/json' },\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['analytics'] });\n    },\n  });\n}\n\nexport function useUpdateTask() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<Task> }) =>\n      apiRequest(`/api/tasks/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(updates),\n        headers: { 'Content-Type': 'application/json' },\n      }),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['tasks', variables.id] });\n      queryClient.invalidateQueries({ queryKey: ['analytics'] });\n    },\n  });\n}\n\nexport function useDeleteTask() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/tasks/${id}`, {\n        method: 'DELETE',\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['analytics'] });\n    },\n  });\n}","size_bytes":2445},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  arg1: string,\n  arg2?: RequestInit | string,\n  arg3?: unknown\n): Promise<any> {\n  let url: string;\n  let init: RequestInit = {\n    credentials: \"include\",\n    headers: { \"Content-Type\": \"application/json\" }\n  };\n\n  // Handle legacy signature: apiRequest(method, url, data)\n  if (typeof arg2 === 'string' || arg3 !== undefined) {\n    const method = arg1.toUpperCase();\n    url = arg2 as string;\n    if (arg3 !== undefined) {\n      init.body = JSON.stringify(arg3);\n    }\n    init.method = method;\n  } else {\n    // Handle new signature: apiRequest(url, options)\n    url = arg1;\n    init = { ...init, method: 'GET', ...(arg2 || {}) };\n  }\n\n  // Defensive guard: if method looks like a URL, reset to GET\n  if (init.method && init.method.startsWith('/')) {\n    init.method = 'GET';\n  }\n\n  const res = await fetch(url, init);\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1931},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function getPriorityColor(priority: 1 | 2 | 3 | 4 | 5): string {\n  switch (priority) {\n    case 1: return \"bg-destructive text-destructive-foreground\";\n    case 2: return \"bg-chart-3 text-white\";\n    case 3: return \"bg-chart-2 text-white\";\n    case 4: return \"bg-chart-5 text-white\";\n    case 5: return \"bg-muted text-muted-foreground\";\n    default: return \"bg-muted text-muted-foreground\";\n  }\n}\n\nexport function getPriorityLabel(priority: 1 | 2 | 3 | 4 | 5): string {\n  switch (priority) {\n    case 1: return \"Critical\";\n    case 2: return \"High\";\n    case 3: return \"Medium\";\n    case 4: return \"Low\";\n    case 5: return \"Minimal\";\n    default: return \"Unknown\";\n  }\n}\n\nexport function formatDuration(minutes: number): string {\n  if (minutes < 60) {\n    return `${minutes}m`;\n  }\n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n}\n\nexport function getStatusColor(status: string): string {\n  switch (status) {\n    case 'completed': return \"text-chart-1\";\n    case 'in-progress': return \"text-chart-3\";\n    case 'overdue': return \"text-destructive\";\n    case 'pending': return \"text-muted-foreground\";\n    default: return \"text-muted-foreground\";\n  }\n}\n","size_bytes":1442},"client/src/pages/AIAssistant.tsx":{"content":"import AIContentGenerator from \"@/components/AIContentGenerator\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Sparkles, Zap, Target, Clock, FileText } from \"lucide-react\";\nimport type { AIGeneratedContent } from \"@shared/schema\";\n\nexport default function AIAssistant() {\n  const handleContentGeneration = (content: Omit<AIGeneratedContent, 'id' | 'createdAt'>) => {\n    console.log('AI Content generated:', content);\n  };\n\n  //todo: remove mock functionality\n  const aiInsights = [\n    {\n      icon: Target,\n      title: \"Productivity Optimization\",\n      description: \"Your most productive hours are 9-11 AM. Schedule critical tasks during this window.\",\n      action: \"Optimize Schedule\",\n      type: \"suggestion\"\n    },\n    {\n      icon: Clock,\n      title: \"Time Estimation Accuracy\",\n      description: \"You tend to underestimate design tasks by 25%. I'll adjust future estimates.\",\n      action: \"Update Estimates\", \n      type: \"learning\"\n    },\n    {\n      icon: Zap,\n      title: \"Task Dependencies\",\n      description: \"3 tasks are blocked waiting for 'API Documentation'. Consider prioritizing it.\",\n      action: \"Reorder Tasks\",\n      type: \"warning\"\n    }\n  ];\n\n  const recentGenerated = [\n    {\n      type: 'user-story',\n      title: 'User authentication flow',\n      generatedAt: '2 hours ago'\n    },\n    {\n      type: 'acceptance-criteria', \n      title: 'Dashboard analytics',\n      generatedAt: '1 day ago'\n    },\n    {\n      type: 'test-scenarios',\n      title: 'Task scheduling algorithm',\n      generatedAt: '2 days ago'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"ai-assistant-page\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold flex items-center gap-2\">\n            <Brain className=\"w-6 h-6 sm:w-8 sm:h-8 text-primary\" />\n            AI Assistant\n          </h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Get intelligent insights and generate content for your projects.</p>\n        </div>\n      </div>\n\n      {/* AI Insights */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n        {aiInsights.map((insight, index) => (\n          <Card key={index} className=\"hover-elevate\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <insight.icon className=\"w-5 h-5 text-primary\" />\n                  <h3 className=\"font-semibold text-sm\">{insight.title}</h3>\n                </div>\n                <Badge \n                  variant={insight.type === 'warning' ? 'destructive' : 'outline'}\n                  className=\"text-xs\"\n                >\n                  {insight.type}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <p className=\"text-sm text-muted-foreground\">{insight.description}</p>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"w-full\"\n                onClick={() => console.log(`Executing: ${insight.action}`)}\n                data-testid={`button-${insight.action.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {insight.action}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 sm:gap-6\">\n        {/* Content Generator */}\n        <div className=\"xl:col-span-2\">\n          <AIContentGenerator onGenerate={handleContentGeneration} />\n        </div>\n\n        {/* Recent Activity & Quick Actions */}\n        <div className=\"space-y-4 sm:space-y-6\">\n          {/* Recent Generated Content */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <FileText className=\"w-4 h-4\" />\n                Recent Generated Content\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {recentGenerated.map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between p-2 hover-elevate rounded cursor-pointer\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-sm capitalize\">\n                      {item.type.replace('-', ' ')}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {item.title}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {item.generatedAt}\n                  </div>\n                </div>\n              ))}\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-3\">\n                View All Generated Content\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Quick AI Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Sparkles className=\"w-4 h-4\" />\n                Quick AI Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full justify-start gap-2\"\n                onClick={() => console.log('Optimize schedule triggered')}\n                data-testid=\"button-optimize-schedule\"\n              >\n                <Zap className=\"w-4 h-4\" />\n                Optimize Today's Schedule\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full justify-start gap-2\"\n                onClick={() => console.log('Analyze patterns triggered')}\n                data-testid=\"button-analyze-patterns\"\n              >\n                <Brain className=\"w-4 h-4\" />\n                Analyze Productivity Patterns\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full justify-start gap-2\"\n                onClick={() => console.log('Generate insights triggered')}\n                data-testid=\"button-generate-insights\"\n              >\n                <Target className=\"w-4 h-4\" />\n                Generate Weekly Insights\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* AI Learning Progress */}\n          <Card className=\"bg-gradient-to-br from-primary/5 to-primary/10 border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <Brain className=\"w-4 h-4 text-primary\" />\n                AI Learning Progress\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Pattern Recognition</span>\n                  <span className=\"font-medium\">87%</span>\n                </div>\n                <div className=\"w-full bg-primary/20 rounded-full h-2\">\n                  <div className=\"bg-primary h-2 rounded-full w-[87%]\"></div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Personalization</span>\n                  <span className=\"font-medium\">73%</span>\n                </div>\n                <div className=\"w-full bg-primary/20 rounded-full h-2\">\n                  <div className=\"bg-primary h-2 rounded-full w-[73%]\"></div>\n                </div>\n              </div>\n\n              <p className=\"text-xs text-muted-foreground mt-3\">\n                The AI continues learning from your task patterns to provide better recommendations.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8333},"client/src/pages/Calendar.tsx":{"content":"import { useState } from \"react\";\nimport CalendarView from \"@/components/CalendarView\";\nimport TaskForm from \"@/components/TaskForm\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Calendar as CalendarIcon, Clock } from \"lucide-react\";\nimport type { Task } from \"@shared/types\";\n\nexport default function Calendar() {\n  const [showTaskForm, setShowTaskForm] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [selectedHour, setSelectedHour] = useState<number | null>(null);\n\n  const handleTaskDrop = (taskId: string, date: Date, hour: number) => {\n    console.log(`Task ${taskId} scheduled for ${date.toDateString()} at ${hour}:00`);\n  };\n\n  const handleCreateEvent = (date: Date, hour?: number) => {\n    setSelectedDate(date);\n    setSelectedHour(hour || null);\n    setShowTaskForm(true);\n    console.log('Creating event for:', date, hour);\n  };\n\n  const handleTaskSubmit = (taskData: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => {\n    if (selectedDate) {\n      const scheduledStart = new Date(selectedDate);\n      if (selectedHour !== null) {\n        scheduledStart.setHours(selectedHour, 0, 0, 0);\n      }\n      \n      const taskWithSchedule = {\n        ...taskData,\n        scheduledStart,\n        scheduledEnd: new Date(scheduledStart.getTime() + taskData.estimatedTime * 60 * 1000)\n      };\n      \n      console.log('Creating scheduled task:', taskWithSchedule);\n    }\n    \n    setShowTaskForm(false);\n    setSelectedDate(null);\n    setSelectedHour(null);\n  };\n\n  const handleFormCancel = () => {\n    setShowTaskForm(false);\n    setSelectedDate(null);\n    setSelectedHour(null);\n    console.log('Calendar task form cancelled');\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"calendar-page\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Calendar</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Drag tasks onto time slots or click to create new ones.</p>\n        </div>\n        <Button onClick={() => handleCreateEvent(new Date())} className=\"gap-2 w-full sm:w-auto\">\n          <CalendarIcon className=\"w-4 h-4\" />\n          Quick Schedule\n        </Button>\n      </div>\n\n      {/* AI Scheduling Suggestions */}\n      <Card className=\"border-primary/20 bg-primary/5\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Sparkles className=\"w-4 h-4 text-primary\" />\n            AI Scheduling Recommendations\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge variant=\"outline\" className=\"gap-1 hover-elevate cursor-pointer\">\n              <Clock className=\"w-3 h-3\" />\n              Move \"AI Review\" to 10:00 AM (optimal focus time)\n            </Badge>\n            <Badge variant=\"outline\" className=\"gap-1 hover-elevate cursor-pointer\">\n              <CalendarIcon className=\"w-3 h-3\" />\n              Schedule \"Team Meeting\" buffer: +15 min\n            </Badge>\n            <Badge variant=\"outline\" className=\"gap-1 hover-elevate cursor-pointer\">\n              <Sparkles className=\"w-3 h-3\" />\n              Group similar tasks for better flow\n            </Badge>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Based on your productivity patterns and task complexity analysis\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Calendar View */}\n      <CalendarView\n        view=\"week\"\n        onTaskDrop={handleTaskDrop}\n        onCreateEvent={handleCreateEvent}\n      />\n\n      {/* Task Creation Dialog */}\n      <Dialog open={showTaskForm} onOpenChange={setShowTaskForm}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Schedule New Task\n              {selectedDate && (\n                <span className=\"text-sm text-muted-foreground font-normal block\">\n                  {selectedDate.toLocaleDateString()}\n                  {selectedHour !== null && ` at ${selectedHour.toString().padStart(2, '0')}:00`}\n                </span>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n          <TaskForm\n            onSubmit={handleTaskSubmit}\n            onCancel={handleFormCancel}\n            isLoading={false}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":4801},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Analytics from \"@/components/Analytics\";\nimport TaskCard from \"@/components/TaskCard\";\nimport ProgressBar from \"@/components/ProgressBar\";\nimport { Plus, Calendar, Clock, Target, TrendingUp } from \"lucide-react\";\nimport type { Task } from \"@shared/schema\";\nimport { useTasks } from \"@/hooks/useTasks\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\n\ninterface DashboardProps {\n  onCreateTask?: () => void;\n  onNavigate?: (page: string) => void;\n}\n\nexport default function Dashboard({ onCreateTask, onNavigate }: DashboardProps) {\n  const { data: tasks = [], isLoading: tasksLoading } = useTasks();\n  const { data: analytics, isLoading: analyticsLoading } = useAnalytics();\n  \n  // Get upcoming tasks (next 3 tasks with deadlines or in-progress)\n  const upcomingTasks = tasks\n    .filter(task => task.status === 'in-progress' || \n                   (task.deadline && new Date(task.deadline) > new Date()))\n    .sort((a, b) => {\n      if (a.status === 'in-progress' && b.status !== 'in-progress') return -1;\n      if (b.status === 'in-progress' && a.status !== 'in-progress') return 1;\n      if (a.deadline && b.deadline) {\n        return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();\n      }\n      return 0;\n    })\n    .slice(0, 3);\n\n  const todaysStats = {\n    totalTasks: analytics?.totalTasks || 0,\n    completedTasks: analytics?.completedTasks || 0,\n    inProgressTasks: analytics?.inProgressTasks || 0,\n    productivityScore: analytics?.productivityScore || 0\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"dashboard-page\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Dashboard</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Welcome back! Here's your productivity overview.</p>\n        </div>\n        <Button onClick={onCreateTask} data-testid=\"button-dashboard-create-task\" className=\"gap-2 w-full sm:w-auto\">\n          <Plus className=\"w-4 h-4\" />\n          New Task\n        </Button>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"hover-elevate\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Today's Tasks</p>\n                <p className=\"text-2xl font-bold\">{todaysStats.totalTasks}</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {todaysStats.completedTasks} completed\n                </p>\n              </div>\n              <Target className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                <p className=\"text-2xl font-bold\">{todaysStats.inProgressTasks}</p>\n                <p className=\"text-xs text-chart-3\">Active right now</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Productivity Score</p>\n                <p className=\"text-2xl font-bold\">{todaysStats.productivityScore}</p>\n                <p className=\"text-xs text-chart-1\">+12% from last week</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate cursor-pointer\" onClick={() => onNavigate?.('calendar')}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Next Deadline</p>\n                <p className=\"text-2xl font-bold\">2d</p>\n                <p className=\"text-xs text-chart-3\">AI Review Task</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 sm:gap-6\">\n        {/* Upcoming Tasks */}\n        <div className=\"xl:col-span-1 space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-base sm:text-lg font-semibold\">Upcoming Tasks</h3>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => onNavigate?.('tasks')}\n              data-testid=\"button-view-all-tasks\"\n              className=\"text-xs sm:text-sm\"\n            >\n              View All\n            </Button>\n          </div>\n          <div className=\"space-y-3\">\n            {tasksLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map(i => (\n                  <div key={i} className=\"h-24 bg-muted animate-pulse rounded-lg\" />\n                ))}\n              </div>\n            ) : upcomingTasks.length > 0 ? (\n              upcomingTasks.map((task) => (\n                <TaskCard \n                  key={task.id} \n                  task={task}\n                  onEdit={(task) => console.log('Edit task:', task)}\n                  onStatusChange={(id, status) => console.log('Status change:', id, status)}\n                />\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Target className=\"w-12 h-12 mx-auto mb-2\" />\n                <p>No upcoming tasks</p>\n                <Button onClick={onCreateTask} variant=\"ghost\" size=\"sm\" className=\"mt-2\">\n                  Create your first task\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Analytics Section */}\n        <div className=\"xl:col-span-2\">\n          <h3 className=\"text-base sm:text-lg font-semibold mb-4\">Performance Analytics</h3>\n          <Analytics timeRange=\"week\" />\n        </div>\n      </div>\n\n      {/* Today's Progress */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Today's Progress</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Daily Goal Completion</span>\n              <span className=\"font-medium\">3/8 tasks</span>\n            </div>\n            <ProgressBar progress={37.5} showLabel={false} />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div className=\"p-3 bg-chart-1/10 rounded-md border border-chart-1/20\">\n              <div className=\"font-medium text-chart-1\">✅ Completed</div>\n              <div className=\"text-muted-foreground\">3 tasks • 4.5 hours</div>\n            </div>\n            <div className=\"p-3 bg-chart-3/10 rounded-md border border-chart-3/20\">\n              <div className=\"font-medium text-chart-3\">⏳ Remaining</div>\n              <div className=\"text-muted-foreground\">5 tasks • 3.2 hours</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7726},"client/src/pages/Tasks.tsx":{"content":"import { useState } from \"react\";\nimport TaskList from \"@/components/TaskList\";\nimport TaskForm from \"@/components/TaskForm\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport type { Task } from \"@shared/types\";\n\nexport default function Tasks() {\n  const [showTaskForm, setShowTaskForm] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n\n  const handleCreateTask = () => {\n    setEditingTask(null);\n    setShowTaskForm(true);\n    console.log('Opening task creation form');\n  };\n\n  const handleEditTask = (task: Task) => {\n    setEditingTask(task);\n    setShowTaskForm(true);\n    console.log('Editing task:', task.id);\n  };\n\n  const handleTaskSubmit = (taskData: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => {\n    if (editingTask) {\n      console.log('Updating task:', editingTask.id, taskData);\n    } else {\n      console.log('Creating new task:', taskData);\n    }\n    setShowTaskForm(false);\n    setEditingTask(null);\n  };\n\n  const handleTaskDelete = (taskId: string) => {\n    console.log('Deleting task:', taskId);\n  };\n\n  const handleStatusChange = (taskId: string, status: Task['status']) => {\n    console.log('Changing task status:', taskId, status);\n  };\n\n  const handleFormCancel = () => {\n    setShowTaskForm(false);\n    setEditingTask(null);\n    console.log('Task form cancelled');\n  };\n\n  return (\n    <div data-testid=\"tasks-page\">\n      <TaskList\n        onTaskEdit={handleEditTask}\n        onTaskDelete={handleTaskDelete}\n        onTaskStatusChange={handleStatusChange}\n        onCreateTask={handleCreateTask}\n      />\n\n      <Dialog open={showTaskForm} onOpenChange={setShowTaskForm}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingTask ? 'Edit Task' : 'Create New Task'}\n            </DialogTitle>\n          </DialogHeader>\n          <TaskForm\n            task={editingTask || undefined}\n            onSubmit={handleTaskSubmit}\n            onCancel={handleFormCancel}\n            isLoading={false}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":2175},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AIContentGenerator.tsx":{"content":"import AIContentGenerator from '../AIContentGenerator'\n\nexport default function AIContentGeneratorExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <AIContentGenerator\n        onGenerate={(content) => console.log('Generated content:', content)}\n      />\n    </div>\n  )\n}","size_bytes":285},"client/src/components/examples/Analytics.tsx":{"content":"import Analytics from '../Analytics'\n\nexport default function AnalyticsExample() {\n  return (\n    <div className=\"p-4\">\n      <Analytics timeRange=\"month\" />\n    </div>\n  )\n}","size_bytes":174},"client/src/components/examples/AppSidebar.tsx":{"content":"import { SidebarProvider } from \"@/components/ui/sidebar\"\nimport AppSidebar from '../AppSidebar'\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-96 w-full border rounded-md overflow-hidden\">\n        <AppSidebar\n          currentPage=\"tasks\"\n          onNavigate={(page) => console.log('Navigate to:', page)}\n          onCreateTask={() => console.log('Create new task')}\n        />\n      </div>\n    </SidebarProvider>\n  )\n}","size_bytes":612},"client/src/components/examples/CalendarView.tsx":{"content":"import CalendarView from '../CalendarView'\nimport type { Task } from '@shared/schema'\n\nexport default function CalendarViewExample() {\n  //todo: remove mock functionality\n  const sampleTasks: Task[] = [\n    {\n      id: \"1\",\n      title: \"Team standup\",\n      description: \"Daily team synchronization\",\n      priority: 3,\n      estimatedTime: 30,\n      progress: 0,\n      status: 'pending',\n      scheduledStart: new Date(Date.now() + 24 * 60 * 60 * 1000), // Tomorrow 9 AM\n      scheduledEnd: new Date(Date.now() + 24 * 60 * 60 * 1000 + 30 * 60 * 1000),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    },\n    {\n      id: \"2\", \n      title: \"Code review\",\n      description: \"Review pull requests\",\n      priority: 2,\n      estimatedTime: 60,\n      progress: 0,\n      status: 'pending',\n      scheduledStart: new Date(Date.now() + 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000), // Tomorrow 11 AM\n      scheduledEnd: new Date(Date.now() + 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }\n  ];\n\n  return (\n    <div className=\"p-4\">\n      <CalendarView\n        tasks={sampleTasks}\n        view=\"week\"\n        onTaskDrop={(taskId, date, hour) => console.log('Task dropped:', taskId, date, hour)}\n        onCreateEvent={(date, hour) => console.log('Create event:', date, hour)}\n      />\n    </div>\n  )\n}","size_bytes":1363},"client/src/components/examples/PriorityIndicator.tsx":{"content":"import PriorityIndicator from '../PriorityIndicator'\n\nexport default function PriorityIndicatorExample() {\n  return (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium\">Priority Levels</h3>\n        <PriorityIndicator priority={1} size=\"md\" />\n        <PriorityIndicator priority={2} size=\"md\" />\n        <PriorityIndicator priority={3} size=\"md\" />\n        <PriorityIndicator priority={4} size=\"md\" />\n        <PriorityIndicator priority={5} size=\"md\" />\n      </div>\n    </div>\n  )\n}","size_bytes":547},"client/src/components/examples/ProgressBar.tsx":{"content":"import ProgressBar from '../ProgressBar'\n\nexport default function ProgressBarExample() {\n  return (\n    <div className=\"space-y-4 p-4 w-64\">\n      <h3 className=\"text-sm font-medium\">Progress Examples</h3>\n      <ProgressBar progress={25} />\n      <ProgressBar progress={50} />\n      <ProgressBar progress={75} />\n      <ProgressBar progress={100} />\n    </div>\n  )\n}","size_bytes":367},"client/src/components/examples/TaskCard.tsx":{"content":"import TaskCard from '../TaskCard'\nimport type { Task } from '@shared/schema'\n\nexport default function TaskCardExample() {\n  //todo: remove mock functionality\n  const sampleTask: Task = {\n    id: \"1\",\n    title: \"Implement AI-powered task scheduling\",\n    description: \"Create the intelligent scheduling algorithm that analyzes task priorities and optimizes calendar placement using machine learning.\",\n    priority: 1,\n    estimatedTime: 240,\n    actualTime: 180,\n    deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n    progress: 65,\n    status: 'in-progress',\n    createdAt: new Date(),\n    updatedAt: new Date()\n  };\n\n  return (\n    <div className=\"p-4 max-w-sm\">\n      <TaskCard \n        task={sampleTask}\n        onEdit={(task) => console.log('Edit task:', task)}\n        onDelete={(id) => console.log('Delete task:', id)}\n        onStatusChange={(id, status) => console.log('Status change:', id, status)}\n      />\n    </div>\n  )\n}","size_bytes":946},"client/src/components/examples/TaskForm.tsx":{"content":"import TaskForm from '../TaskForm'\n\nexport default function TaskFormExample() {\n  return (\n    <div className=\"p-4\">\n      <TaskForm\n        onSubmit={(taskData) => console.log('Task submitted:', taskData)}\n        onCancel={() => console.log('Form cancelled')}\n        isLoading={false}\n      />\n    </div>\n  )\n}","size_bytes":313},"client/src/components/examples/TaskList.tsx":{"content":"import TaskList from '../TaskList'\n\nexport default function TaskListExample() {\n  return (\n    <div className=\"p-4\">\n      <TaskList\n        onTaskEdit={(task) => console.log('Edit task:', task)}\n        onTaskDelete={(id) => console.log('Delete task:', id)}\n        onTaskStatusChange={(id, status) => console.log('Status change:', id, status)}\n        onCreateTask={() => console.log('Create new task')}\n      />\n    </div>\n  )\n}","size_bytes":431},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle'\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />\n}","size_bytes":115},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}